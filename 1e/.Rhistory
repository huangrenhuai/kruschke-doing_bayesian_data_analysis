apply(matrix(rexp(nosim[2]*size[2],lambda), nosim[2]), 1, cfunc, size[2]),
apply(matrix(rexp(nosim[3]*size[3],lambda), nosim[3]), 1, cfunc, size[3])),
size = factor(sapply(nosim, function(m) rep(size, rep(m,3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2, lty=2, col = "red")
g + facet_grid(. ~ nosim) + ggtitle("simulation")
nosim <- c(1000,1000, 1000); size <- c(20, 40, 80)
factor(sapply(nosim, function(x) rep(size, rep(x,3)) ))
size = factor(sapply(nosim, function(m) rep(size, rep(m,3))))
nosim <- c(1000,1000, 1000); size <- c(20, 40, 80); lambda <-0.2; set.seed(100); library(ggplot2)
cfunc <- function(x, n) {sqrt(n)*(mean(x)-1/lambda)*lambda}
dat <- data.frame(
x = c(apply(matrix(rexp(nosim[1]*size[1],lambda), nosim[1]), 1, cfunc, size[1]),
apply(matrix(rexp(nosim[2]*size[2],lambda), nosim[2]), 1, cfunc, size[2]),
apply(matrix(rexp(nosim[3]*size[3],lambda), nosim[3]), 1, cfunc, size[3])),
size = factor(sapply(nosim, function(m) rep(size, rep(m,3)))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2, lty=2, col = "red")
g + facet_grid(. ~ nosim) + ggtitle("simulation")
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2, lty=2, col = "red")
g + facet_grid(. ~ size) + ggtitle("simulation")
nosim <- c(1000,1000, 1000); size <- c(10, 40, 80); lambda <-0.2; set.seed(100); library(ggplot2)
cfunc <- function(x, n) {sqrt(n)*(mean(x)-1/lambda)*lambda}
dat <- data.frame(
x = c(apply(matrix(rexp(nosim[1]*size[1],lambda), nosim[1]), 1, cfunc, size[1]),
apply(matrix(rexp(nosim[2]*size[2],lambda), nosim[2]), 1, cfunc, size[2]),
apply(matrix(rexp(nosim[3]*size[3],lambda), nosim[3]), 1, cfunc, size[3])),
size = factor(sapply(nosim, function(m) rep(size, rep(m,3)))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2, lty=2, col = "red")
g + facet_grid(. ~ size) + ggtitle("simulation")
nosim <- c(1000,1000, 1000); size <- c(10, 40, 80); n<- size[2]; lambda <-0.2; set.seed(100); library(ggplot2)
data <- sapply(1:nosim[2], function(m) {xvals <- rexp(n, lambda); return(c(mean(xvals),sd(xvals), 100))})
data <-data.frame(mean=data[1,], sd=data[2,], lowlimit=data[1,]-1.96*data[2,]/sqrt(n), uplimit=data[1,]+1.96*data[2,]/sqrt(n))
hist(data$mean, breaks=25, xlim=c(2,9),main="The mean distribution of the exponential distribution", xlab="", sub="The dotted blue line showing the center of the simulation and \nthe red line showing the theoretical center");
abline(v=mean(data$mean), lwd=2,col="blue", lty=2)  #blue line showing the center of the distribution
abline(v=1/lambda, lwd=2, col="red") #red line showing theoretical center of the distribution
nosim <- c(1000,1000, 1000); size <- c(10, 40, 80); n<- size[2]; lambda <-0.2; set.seed(10); library(ggplot2)
data <- sapply(1:nosim[2], function(m) {xvals <- rexp(n, lambda); return(c(mean(xvals),sd(xvals), 100))})
data <-data.frame(mean=data[1,], sd=data[2,], lowlimit=data[1,]-1.96*data[2,]/sqrt(n), uplimit=data[1,]+1.96*data[2,]/sqrt(n))
hist(data$mean, breaks=25, xlim=c(2,9),main="The mean distribution of the exponential distribution", xlab="", sub="The dotted blue line showing the center of the simulation and \nthe red line showing the theoretical center");
abline(v=mean(data$mean), lwd=2,col="blue", lty=2)  #blue line showing the center of the distribution
abline(v=1/lambda, lwd=2, col="red") #red line showing theoretical center of the distribution
data(ToothGrowth)
data(ToothGrowth); head(ToothGrowth)
data(ToothGrowth); head(ToothGrowth); str(ToothGrowth)
data(ToothGrowth); head(ToothGrowth); str(ToothGrowth); plot(ToothGrowth)
?par
par(mfrow=c(3,1))
with(ToothGrowth, plot(len~supp), plot(len~dose), plot(supp~dose))
with(ToothGrowth, plot(len~dose))
with(ToothGrowth, plot(len~dose))
par(mfrow=c(1,1))
with(ToothGrowth, plot(len~dose))
with(ToothGrowth, plot(dose~len))
table(ToothGrowth$dose)
table(ToothGrowth$supp)
table(ToothGrowth$supp, ToothGrowth$dose)
?t.test
tapply(ToothGrowth, supp, fun=mean)
tapply(ToothGrowth, ToothGrowth$supp, fun=mean)
apply(ToothGrowth, ToothGrowth$supp, fun=mean)
apply(ToothGrowth, ToothGrowth$supp, fun="mean")
apply(ToothGrowth, ToothGrowth$supp, FUN="mean")
x <- data.frame(text = ")
6         b  N3   901.23           dN3        T2")
x<-data.frame(text="
unique_id seq response detailed.name treatment
1         a  N1   123.23           dN1        T1
2         a  N2   231.12           dN2        T1
3         a  N3   231.23           dN3        T1
4         b  N1   343.23           dN1        T2
5         b  N2   281.13           dN2        T2
6         b  N3   901.23           dN3        T2")
x
?data.frame
aggregate(len~supp, data = ToothGrowth, FUN="mean")
aggregate(len~supp, data = ToothGrowth, FUN=c("mean", "sd"))
?aggregate
aggregate(len~supp+dose, data = ToothGrowth, FUN="mean")
aggregate(len~dose+supp, data = ToothGrowth, FUN="mean")
x<-read.table(header=T, text="
unique_id seq response detailed.name treatment
1         a  N1   123.23           dN1        T1
2         a  N2   231.12           dN2        T1
3         a  N3   231.23           dN3        T1
4         b  N1   343.23           dN1        T2
5         b  N2   281.13           dN2        T2
6         b  N3   901.23           dN3        T2")
x
data(ToothGrowth); str(ToothGrowth); library(ggplot2)
ggplot(ToothGrowth, aes(x=supp, y=len)+geom_points()
ggplot(ToothGrowth, aes(x=supp, y=len))+geom_points()
ggplot(ToothGrowth, aes(x=supp, y=len))+geom_points()
data(ToothGrowth); str(ToothGrowth); library(ggplot2)
ggplot(data=ToothGrowth, aes(x=supp, y=len, fill=dose))+geom_point()
ggplot(data=ToothGrowth, aes(x=supp, y=len, group=dose))+geom_point()
ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=supp))+geom_point()
data(ToothGrowth); str(ToothGrowth); library(ggplot2)
ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=supp))+geom_point()+ggtitle("Comparing tooth growth by supp and dose")
data(ToothGrowth); str(ToothGrowth); library(ggplot2)
ggplot(data=ToothGrowth, aes(x=factor(dose), y=len, color=supp))  + geom_point()+ xlab("Dose")+ylab("Length")+theme_bw()+ggtitle("Comparing tooth growth by supp and dose")
datToothGrowth <- aggregate(data=ToothGrowth, len~supp+dose, FUN = "mean"); colnames(datToothGrowth)[3]<-"Length.Mean";
datToothGrowth$Length.std <- aggregate(data=ToothGrowth, len~supp+dose, FUN="sd")[,3];
datToothGrowth$Sample.size <- data.frame(table(ToothGrowth$supp, ToothGrowth$dose))[,3]; datToothGrowth
ToothGrowth
ToothGrowth$ID <-rep(1:10,6)
ToothGrowth
dcast(ToothGrowth, supp+dose~ID, value.var="len")
library(reshape2); dcast(ToothGrowth, supp+dose~ID, value.var="len")
X = read.table("http://www.UTDallas.edu/~ammann/SmokeCancer.csv",
header=TRUE,sep=",",row.names=1)
LungCancer = data.frame(CigSalesRate=100000*X[,"FY2010Sales"]/X[,"Pop2010"],
X[,c("CigYouthRate","CigAdultRate","LungCancerRate")])
View(LungCancer)
LungCancer
LungCancer3.lm = lm(LungCancerRate ~ CigAdultRate, data = LungCancer)
LungCancer3.sum = summary(LungCancer3.lm)
print(LungCancer3.sum)
data(Titanic)
dimnames(Titanic)
head(Titanic)
str(Titanic)
head(Titanic, 6)
Titanic
class(Titanic)
?class
margin.table(Titanic)
margin.table(Titanic, c(2,4))
dimnames(Titanic)
mtcars
model1 = step(lm(mpg ~ . ,mtcars), trace=0)
model1 = step(lm(mpg ~ . ,mtcars), trace=0)
summary(model1)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(caret)
set.seed(125)
head(segmentationOriginal)
str(segmentationOriginal)
segmentationOriginal$Case
segmentationOriginal$CART
?AppliedPredictiveMedeling
?AppliedPredictiveModeling
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list = F)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
modFit <- train( Case ~ ., method = "rpart", data = training)
modFit$finalModel
library(rattle)
install.packages(rattle)
install.packages("rattle")
library(rattle)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
library(caret)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("rattle", repos = c("http://rstudio.org/_packages",
))
install.packages("rattle", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages(rattle, dependencies = c("Depends", "Suggests"))
install.packages("rattle", dependencies = c("Depends", "Suggests"))
install.packages("rattle", dependencies = c("Depends", "Suggests"))
install.packages("rattle", dependencies = c("Depends", "Suggests"))
library(rattle)
fancyRpartPlot(modFit$finalModel)
47e+3
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret); library(rattle)
table(segmentationOriginal$Case)
training <- subset(data=segmentationOriginal, Case = "Train")
training <- subset(data=segmentationOriginal, Case == "Train")
?subset
training <- subset(segmentationOriginal, Case == "Train")
str(training)
testing <- subset(segmentationOriginal, Case == "Test")
??segmentationOriginal
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
data(olive)
library(caret)
library(pgmm)
data(olive); str(olive)
olive = olive[,-1]; str(olive)
library(pgmm)
data(olive); str(olive)
olive = olive[,-1]; str(olive)
inTrain <- createDataPartition(y = olive$Area, p = 0.7, list = F)
training <- olive[inTrain, ]
testing  <- olive[-inTrain, ]
modFit <- train(Area ~ . , method = 'rpart', data = training)
modFit$finalModel
library(rattle)
fancyRpartPlot(modFit)
library(caret)
library(pgmm)
data(olive); str(olive)
olive = olive[,-1]; str(olive)
inTrain <- createDataPartition(y = olive$Area, p = 0.7, list = F)
training <- olive[inTrain, ]
testing  <- olive[-inTrain, ]
modFit <- train(Area ~ . , method = 'rpart', data = training)
modFit$finalModel
library(rattle)
fancyRpartPlot(modFit)
newdata = as.data.frame(t(colMeans(olive)))
newdata
head(training)
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel)
plot(modFit$finalModel, uniform = T)
text(modFit$finalModel, use.n = T, all = T)
plot(modFit$finalModel, uniform = T); text(modFit$finalModel, use.n = T, all = T, cex = 0.8)
plot(modFit$finalModel, uniform = T); text(modFit$finalModel, use.n = T, all = T, cex = 0.6)
sum(olive$Area)
sum(olive$Area)/length(olive$Area)
length(olive$Area)
??olive
?olive
library(caret)
library(pgmm)
data(olive); str(olive)
olive = olive[,-1]; str(olive)
inTrain <- createDataPartition(y = olive$Area, p = 0.7, list = F)
training <- olive[inTrain, ]
testing  <- olive[-inTrain, ]
modFit <- train(factor(Area) ~ . , method = 'rpart', data = training)
modFit$finalModel
plot(modFit$finalModel, uniform = T); text(modFit$finalModel, use.n = T, all = T, cex = 0.6)
library(rattle)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata = newdata)
?rpart
library(caret)
library(pgmm)
data(olive); str(olive)
olive = olive[,-1]; str(olive)
inTrain <- createDataPartition(y = olive$Area, p = 0.7, list = F)
training <- olive[inTrain, ]
testing  <- olive[-inTrain, ]
# modFit <- train(factor(Area) ~ . , method = 'rpart', data = training)
# modFit <- train(Area ~ . , method = 'rpart', data = training)
modFit <- rpart(Area ~ . , data = training)
modFit$finalModel
modFit <- rpart(Area ~ . , data = training)
modFit
fancyRpartPlot(modFit)
predict(modFit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
dim(SAheart)
dim(SAheart)[1]
dim(SAheart)[1]/2
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
train
trainSA = SAheart[train,]
testSA = SAheart[-train,]
trainSA = SAheart[train,]; dim(trainSA)
testSA = SAheart[-train,]; dim(testSA)
head(trainSA)
str(training)
str(trainSA)
?SAheart
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]; dim(trainSA)
testSA = SAheart[-train,]; dim(testSA)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco+ typea + ldl, method = "glm", family = "binomial", data = trainSA)
modFit$finalModel
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco+ typea + ldl, method = "glm", family = binomial, data = trainSA)
modFit$finalModel
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
t.predict <- prediction(modFit$finalModel, newdata = trainSA)
missClass(trainSA$chd, t.predict)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
t.predict <- predict(modFit$finalModel, newdata = trainSA)
missClass(trainSA$chd, t.predict)
missClass(testSA$chd, predict(modFit$finalModel, newdata = testSA))
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco+ typea + ldl, method = "glm", family = binomial, data = trainSA)
modFit$finalModel
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(modFit$finalModel, newdata = trainSA)) # trainSA
missClass(testSA$chd, predict(modFit$finalModel, newdata = testSA)) # testSA
180*12
800+1500
1+2+4+8+16
c(0,250,250,60,rep(c(250,60,150,150,60),6), 250,60,150,150)
scheme <- c(0,250,250,60,rep(c(250,60,150,150,60),6), 250,60,150,150)
length(scheme)
sapply(1:length(scheme), function(n){sum(scheme[1:n])})
x <- 1:10
x3 <- rep(x, 3)
x3
mean(x); mean(x3)
sd(x); sd(x3)
var(x)
var(x3)
var(x)+var(x)+var(x)
27.5/3
mean((x-sd(x))^2)
sum((x-sd(x))^2)
sum((x-sd(x))^2)/10
var(x)
((x-sd(x))^2)
sd(x)
((x-3.02765)^2)
mean(((x-3.02765)^2))
?var
var(1:10)
x
(x-mean(x))^2
mean(x)
var((x-mean(x))^2)
mean((x-mean(x))^2)
sum((x-mean(x))^2)
sum((x-mean(x))^2)/9
sum((x-mean(x))^2)/10
sum((x3-mean(x3))^2)/10
sum((x3-mean(x3))^2)/30
13104/62762
125*0.8
70*2*3 + 190*4
0.375*0.375
rep(1, 5)
rep(1:2, 5)
rep(1:2, 4:5)
paste(rep(1,5), rep(2,5))
paste(rep(1,5), rep(2,5), sep=" ")
paste(rep(1,5), rep(2,5), sep=", ")
paste(rep(1,5), rep(2,5), sep=" ")
gsub("\"", " "paste(rep(1,5), rep(2,5), sep=" ")
gsub("\"", " ", paste(rep(1,5), rep(2,5), sep=" ")
)
gsub("2", "3", paste(rep(1,5), rep(2,5), sep=" "))
unlist(gsub("2", "3", paste(rep(1,5), rep(2,5), sep=" ")))
?pmin
pmin(rep(1,5). rep(2,5))
pmin(rep(1,5), rep(2,5))
?dbeta
?ceiling
ceiling(5.5)
ceiling(51.5)
ceiling(51.1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(2)
runif(1)
prior = function( theta ) {
)))
source('~/MyGit/kruschke-doing_bayesian_data_analysis/RH/BernMetropolisTemplate.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
setwd("~/MyGit/kruschke-doing_bayesian_data_analysis/1e")
source('~/.active-rstudio-document')
11/14
myData = c( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0 )
source('~/.active-rstudio-document')
myData
myData = c( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0 )
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
myData = c( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0 )
source('~/.active-rstudio-document')
?runif(
)
runif()
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
dunif(1)
dunif(0.5)
dunif(0.5)
dunif(0.5)
dunif(0.1)
dunif(0.2)
dunif(0.3)
dunif(0.4)
dunif(seq(0,1,by = 0.01))
install.packages("BRugs")
install.packages('R2OpenBUGS',type='source')
install.packages('RBugs',type='source')
install.packages('BRugs',type='source')
library(BRugs)
install.packages('BRugs',type='source')
install.packages("OpenBUGS")
install.packages("OpenBUGS", type = source)
install.packages("OpenBUGS", type = 'source')
52*7
sample(c(0,1))
sample(10. c(0,1), replace = T)
sample(10, c(0,1), replace = T)
sample(2, c(0,1), replace = T)
sample(c(0,1), replace = T)
sample(c(0,1), 10, replace = T)
sample(c(0,1), 20, replace = T)
mean(sample(c(0,1), 20, replace = T))
mean(sample(c(0,1), 20, replace = T))
mean(sample(c(0,1), 20, replace = T))
mean(sample(c(0,1), 20, replace = T))
mean(sample(c(0,1), 20, replace = T))
mean(sample(c(0,1), 200, replace = T))
mean(sample(c(0,1), 200, replace = T))
mean(sample(c(0,1), 200, replace = T))
mean(sample(c(0,1), 200, replace = T))
mean(sample(c(0,1), 200, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T))
mean(sample(c(0,1), 2000, replace = T)); seed(100)
mean(sample(c(0,1), 2000, replace = T)); setseed(100)
mean(sample(c(0,1), 2000, replace = T)); setseeds(100)
mean(sample(c(0,1), 2000, replace = T)); set.seed(100)
mean(sample(c(0,1), 2000, replace = T)); set.seed(100)
mean(sample(c(0,1), 2000, replace = T)); set.seed(100)
mean(sample(c(0,1), 2000, replace = T)); set.seed(100)
mean(sample(c(0,1), 2000, replace = T)); set.seed(100)
mean(sample(c(0,1), 2000, replace = T)); set.seed(100)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(10000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(10000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(10000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(100000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(100000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(100000)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1001)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1001)
mean(sample(c(0,1), 2000, replace = T)); set.seed(1001)
install.packages("rjags")
library(rjags)
library(rjags)
?seq
seq(0,1,length = 10)
seq(0,1,length.out = 10)
seq(17)
seq(1,17)
seq(17)
seq(100)
